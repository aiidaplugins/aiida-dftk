# -*- coding: utf-8 -*-
"""`CalcJob` implementation for DFTK."""
import io
import os
import typing as ty

from aiida import orm
from aiida.engine import CalcJob


class DftkCalculation(CalcJob):
    """`CalcJob` implementation for DFTK"""
    @classmethod
    def define(cls, spec):
        """Define the process specification."""
        super().define(spec)
        spec.input('structure', valid_type=orm.StructureData,
            help='structure')
        spec.input('kpoints', valid_type=orm.KpointsData,
            help='kpoint mesh or kpoint path')
        spec.input('parameters', valid_type=orm.Dict,
            help='input parameters')
        spec.inputs.validator = cls.validate_inputs

        spec.output('parameters', valid_type=orm.Dict,
            help='output parameters')
        spec.output('structure', valid_type=orm.Dict, required=False,
            help='output structure')
        spec.output('trajectory', valid_type=orm.TrajectoryData, required=False,
            help='trajectory data from structure optimization')
        spec.output('bands', valid_type=orm.BandsData, required=False,
            help='eigenvalues array')
        spec.output('kpoints', valid_type=orm.KpointsData, required=False,
            help='kpoints array, if generated by DFTK')
        spec.default_output_node = 'output_parameters'

    @classmethod
    def validate_inputs(cls, value, _):
        pass

    def _generate_inputdata(self, parameters: orm.Dict, structure: orm.StructureData, kpoints: orm.KpointsData) -> str:
        pass

    def _generate_cmdline_params(self, settings: dict) -> ty.List[str]:
        pass

    def _generate_retrieve_list(self, parameters: orm.Dict, settings: dict) -> list:
        pass

    def prepare_for_submission(self, folder):
        pass

