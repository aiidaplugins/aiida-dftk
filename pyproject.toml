[build-system]
requires = ['flit_core >=3.4,<4']
build-backend = 'flit_core.buildapi'

[project]
name = 'aiida-dftk'
dynamic = ['version']
description = 'AiiDA plugin for DFTK'
authors = [{name = 'Austin Zadoks', email = 'austin.zadoks@epfl.ch'}]
readme = 'README.md'
license = {file = 'LICENSE'}
classifiers = [
    'Development Status :: 1 - Alpha',
    'Framework :: AiiDA',
    'License :: OSI Approved :: MIT License',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
]
keywords = ['aiida', 'workflows']
requires-python = '>=3.8'
dependencies = [
    'aiida_core[atomic_tools]~=2.0',
    'click~=8.0',
    'importlib_resources',
    'jsonschema',
    'numpy',
    'packaging'
]

[project.urls]
Home = 'https://github.com/azadoks/aiida-dftk'
Source = 'https://github.com/azadoks/aiida-dftk'
Documentation = 'https://aiida-dftk.readthedocs.io'

[project.optional-dependencies]
docs = [
    'sphinx~=4.1',
    'sphinx-copybutton~=0.5.0',
    'sphinx-book-theme~=0.3.2',
    'sphinx-click~=4.0',
]
pre-commit = [
    'pre-commit~=2.17',
    'pylint~=2.12.2',
    'pylint-aiida~=0.1.1',
    'toml',
]
tests = [
    'pgtest~=1.3',
    'pytest~=6.0',
    'pytest-regressions~=2.3'
]
tcod = [
    'aiida-tcod'
]

[project.scripts]
aiida-dftk = 'aiida_dftk.cli:cmd_root'

[project.entry-points.'aiida.calculations']
'dftk' = 'aiida_dftk.calculations:DftkCalculation'

[project.entry-points.'aiida.parsers']
'dftk' = 'aiida_dftk.parsers:DftkParser'

[project.entry-points.'aiida.workflows']
'dftk.base' = 'aiida_dftk.workflows.base:DftkBaseWorkChain'

[tool.flit.module]
name = 'aiida_dftk'

[tool.flit.sdist]
exclude = [
    'docs/',
    'tests/',
]

[tool.flynt]
line-length = 120
fail-on-change = true

[tool.isort]
force_sort_within_sections = true
include_trailing_comma = true
line_length = 120
multi_line_output = 3  # this configuration is compatible with yapf

[tool.pydocstyle]
ignore = [
    'D104',
    'D202',
    'D203',
    'D213'
]

[tool.pylint.master]
load-plugins = ['pylint_aiida']

[tool.pylint.format]
max-line-length = 120

[tool.pylint.tool-check]
generated-members = 'self.exit_codes.*'

[tool.pylint.messages_control]
disable = [
    'bad-continuation',
    'duplicate-code',
    'locally-disabled',
    'logging-format-interpolation',
    'inconsistent-return-statements',
    'import-outside-toplevel',
    'no-else-raise',
    'too-many-arguments',
    'too-many-ancestors',
    'too-many-branches',
    'too-many-locals',
]

[tool.pylint.basic]
good-names = [
    'i',
    'j',
    'k',
    'DftkCalculation',
]

[tool.pytest.ini_options]
minversion = '6.0'
testpaths = [
    'tests',
]
filterwarnings = [
    'ignore:Creating AiiDA configuration folder.*:UserWarning',
    'ignore::DeprecationWarning:frozendict:',
    'ignore::DeprecationWarning:pkg_resources:',
    'ignore::DeprecationWarning:sqlalchemy_utils:',
]

[tool.yapf]
align_closing_bracket_with_visual_indent = true
based_on_style = 'google'
coalesce_brackets = true
column_limit = 120
dedent_closing_brackets = true
indent_dictionary_value = false
split_arguments_when_comma_terminated = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py37
[testenv]
usedevelop=True
[testenv:py{36,37,38,39}]
extras = tests
commands = pytest {posargs}
[testenv:py38-pre-commit]
description = Run the pre-commit checks
extras =
    tests
    pre-commit
commands = pre-commit run {posargs}
[testenv:py38-docs-{clean,update}]
description =
    clean: Build the documentation (remove any existing build)
    update: Build the documentation (modify any existing build)
extras = docs
changedir = docs
whitelist_externals = make
commands =
    clean: make clean
    make
"""
